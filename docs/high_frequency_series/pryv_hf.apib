FORMAT: 1A
HOST: https://USER.pryv.me

# High Frequency Pryv API Proposal

This is an API proposal for high frequency Pryv. It should allow us to decide on the details of our API design before committing to it. Version 0.1. 

## Events Model

### Simple Points 

Events represent either a single data point or a series of data points. A single data point can itself be an object of some complexity, please see the [type directory](http://api.pryv.com/event-types/#about-types) for a list of types that are supported. Here's an example for an event recording a `mass/kg` type of measurement: 

```json
{
  "id": "ciwoavk4t000sfmpuwemxdxuv",
  "time": 1481677845.293,
  "streamId": "diary",
  "type": "mass/kg", 
  "content": 34.2
}
```

Note that the actual event object will have many more fields, we only display the fields relevant to the data stored in the event here. 


### Series of Points

An event that contains a series of data points has a type that looks like `series[TYPE]`, where `TYPE` is any of the basic point types described above. 

These are the typical attributes of a `series[TYPE]` value: 

  + elementType: TYPE (string) - Type of the individual record stored in this series. 
  + format: (string) - One of `{'flatJSON', 'JSON'}`, the format that the individual data items are encoded in. 
  + fields: (array[string]) - Field names for each of the fields in a row of this series. Note that the field `"timestamp"` will always be present - it encodes the timestamp when the row was measured. For numerical types like 'mass/kg', row values are encoded in the field `"value"`. For complex types, fields will represent the JSONPath fragment to access the underlying data (see below).
  + data: (array) - Mixed array of all the fields below the current type. For types that aren't encoded in object format (for example '`mass/kg`'), this will always be a single value. For types in object format (for example '`position/wgs84`'), this will be a list of values. See discussion and examples below.
  
The following example encodes a series of weight measurements taken at times one second from each other, starting at 1481677845 from Epoch:

```json
{
  "id": "ciwoavk4t000sfmpuwemxdxuv",
  "time": 1481677845,
  "streamId": "diary",
  "type": "series[mass/kg]", 
  "content": {
    "elementType": "mass/kg", 
    "format": "flatJSON", 
    "fields": ["timestamp", "value"],
    "data": [
      [1481677845, 10], 
      [1481677846, 20], 
      [1481677847, 30]
    ]
  }
}
```

This is the default representation for types that encode a single value ('Numerical Types'). If asked for explicitly, this can be obtained in the form of a '`JSON`' object as well. Here's what the individual row of the data list would look like: 

```json
{
  "timestamp": 1481677845, 
  "value": 10
}
```

We recommend using '`flatJSON`' structure over using '`JSON`' in every case. Here's an example how a series of position measurements ('`position/wgs84`') would be encoded: 

```json
{
  "id": "ciwoavk4t000sfmpuwemxdxuv",
  "time": 1481677845,
  "streamId": "diary",
  "type": "series[position/wgs84]", 
  "content": {
    "elementType": "position/wgs84", 
    "format": "flatJSON", 
    "fields": ["timestamp", "latitude", "longitude"],
    "data": [
      [1481677845, 30, 30], 
      [1481677846, 31, 30], 
      [1481677847, 30, 31]
    ]
  }
}
```

Note that the complex type defines names for each fields contained in it. This appears in the '`fields`' field of the structure. Had there been subfields for any of `"latitude"` or `"longitude"`, they would have been encoded using the flat JSON convention of `"field.subfield"` in the headers. 

### Compatibility of Individual Types with the Series Types

Only a subset of the types described in the type directory can be used as member for a series type. As a general rule, the only values that can be part of a series are strings, floats, integers, or booleans. 

We recommend storing values in a series that are collected at high speed and that you don't want to create individual events for. Typically, a list of images would not be a series event, but a list of BPM measurements would be. 

# Group Events

## Events Collection [/events]

### Create an Event [POST]

Creates an event. 

  + Request (application/json)
  
    + Attributes (Event)
      + content: {} - Posting series content is not supported in a first version. Please leave empty.

### Query Events [GET]

Queries accessible events. Only a subset of the query parameters is copied here, please see the [documentation](http://api.pryv.com/reference/#events) for the current Pryv for more. 

  + Request (application/json)
  
    + Attributes
      + fromTime: 1481677845.293 (timestamp) - The start time of the timeframe you want to retrieve events for. Default is 24 hours before toTime if the latter is set; otherwise it is not taken into account.
      + toTime: 1481677845.293 (timestamp) - The end time of the timeframe you want to retrieve events for. Default is the current time. Note: events are considered to be within a given timeframe based on their time only (duration is not considered).
      + limit: 20 (number) - The number of items to return in the results. A default value of 20 items is used if no other range limiting parameter is specified (`fromTime`, `toTime`).
      + types: `mass/kg`, `series[mass/kg]` (array[string]) - If set, only events of any of the listed types will be returned.
      
  + Response 200 (application/json)
    + Attributes
      + events: (array[Event]) - The accessible events ordered by time (see `sortAscending` above).
      + eventDeletions: (array[ItemDeletion]) - If requested by `includeDeletions`, the event deletions since `modifiedSince`, ordered by deletion time.

## Event [/events/{event_id}]
    
### Get Series Metadata [GET]

Retrieves metadata about a single event, including about the stored series. The returned event will never contain series data, but it will contain all other fields from the content attribute. 

A future extension might be to add a `"description"` field in the content section of this result that contains meta data about the data stored in InfluxDB. 

  + Parameters
    + event_id (identifier) - ID of the event in the form of a string.

  + Response 200 (application/json)
  
    + Attributes(Event)
        
## Series Collection [/events/{event_id}/series]        
        
### Query a Series [GET]

Query data in a series. This function will return a subset or all the data stored in a series. 

  + Parameters
    + event_id (identifier) - ID of the event in the form of a string.
  
### Append Data [POST]

Appends data to an event that is of type `series[ELEMENT]`. Data posted this 
way will be written to the series stored inside the event. 

  + Parameters
    + event_id (identifier) - ID of the event in the form of a string.
    
  + Request (application/json)
    
    + Body
    
      {
        "elementType": "position/wgs84", 
        "format": "flatJSON", 
        "fields": ["timestamp", "latitude", "longitude"], 
        "data": [
          [1481677845, 30, 30], 
          [1481677846, 31, 30], 
          [1481677847, 30, 31]
        ]
      }

  + Response 400 (application/json)
  
    Example: If the event is not of type `"series[SUBTYPE]"`.
    
    + Body

      {
        "status": "error", 
        "reason": "Not a series event."
      }
  
  + Response 200 (application/json)
    
    The posted data was written to this events series. 
    
    + Body
    
      {
        "status": "ok", 
        "linesWritten": 32
      }
    
    
## Data Structures

### cuid (string)

Collision-resistant ids optimized for horizontal scaling and binary search lookup performance.

### timestamp(number)

Time in seconds since the Epoch.

### ItemDeletion(object)

### Event(object)

+ id: ciwoavk4t000sfmpuwemxdxuv (cuid) - The identifier (collision-resistant cuid) for the event. Automatically generated if not set when creating the event.
+ streamId: diary (string) - The id of the belonging stream.
+ time: 1481677845.293 (timestamp) - The event's time. For period events, this is the time the event started.
+ duration (timestamp) - If present and non-zero, indicates that the event is a period event. Running period events have a duration set to null. A duration set to zero is equivalent to no duration. (We use a dedicated field for duration—instead of using the content field—as we do specific processing of event durations, intervals and overlapping.)
+ type: 'series[mass/kg]' (string) - The type of the event. See the event type directory for a list of standard types.
+ content: 
  + elementType: mass/kg (string) - type of every row of the series.
  + format: flatJSON (string) - format of the series representation in a result set. Use only 'flatJSON' for now.
  + fields: `timestamp`, `value` (array[string]) - a list of fields that will be present in the result set if raw data is accessed. Note that the `"timestamp"` field will always be present. It encodes the timestamp of the series row. 


### Point (object)

A single data point of given Event type. The contents of this object depend
heavily on the type specified. 

For all of the numerical types specified in the [type directory](http://api.pryv.com/event-types/#directory), the object maps to a simple `number` type. 

For the complex types such as a 'position/wgs84', this will be a JSON object with the following members (for example): 

+ latitude: (number) - Unit: degrees north from the equator.
+ longitude: (number) - Unit: degrees east from the zero meridian.

# Appendix

## How to handle this Document

Install `aglio`: 

    $ npm install -g aglio
    
Then run 

    $ aglio -i pryv_hf.apib --server  --theme-variables flatly --theme-template triple
    
Connect your browser to http://127.0.0.1:3000. The document will live-reload after changes saved. 


