#!/usr/bin/env bash

set -e

# Builds 'service-core' docker image with the version given below. 

# Determine the build_tag and whether we need to release.
scripts/build_name

version=$(cat build_tag)
if [ -e release_build ]; then
  echo "This is a release build, it will update 'latest' tags."
fi

function release {
  local service_name=$1
  local version=$2
  
  if [ -e ../release_build ]; then
    sudo docker tag $service_name:$version $service_name:latest

    # Publication to registry:
    sudo docker tag $service_name:$version localhost:5000/$service_name:$version
    sudo docker tag $service_name:$version localhost:5000/$service_name:latest
    
    sudo docker push localhost:5000/$service_name:$version
    sudo docker push localhost:5000/$service_name:latest
  fi
}

# Create a release.tar that contains all the code. 
pushd ..
tar cf build/release.tar \
  --exclude .git \
  --exclude node_modules \
  --exclude */node_modules \
  --exclude build \
  .
popd

echo "---------------------------- building service-core ----------------------"
pushd service-core
cp ../release.tar .
sudo docker build -f Dockerfile -t pryv/service-core:$version .
release "pryv/service-core" $version
popd

echo "---------------------------- building core ------------------------------"
pushd core
cp ../release.tar .
sudo docker build -f Dockerfile -t pryv/core:$version .
release "pryv/core" $version
popd

echo "---------------------------- building preview ---------------------------"
pushd preview
cp ../release.tar .
sudo docker build -f Dockerfile -t pryv/preview:$version .
release "pryv/preview" $version
popd

