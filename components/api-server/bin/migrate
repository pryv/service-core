#!/usr/bin/env node

// Binary for launching the db migration process.

const { getApplication } = require('api-server/src/application');
const bluebird = require('bluebird');
const { getLogger, getConfig } = require('@pryv/boiler');
let logger;

(async () => {
  const config = await getConfig();

  // boost timeout values because DB operations can be above the default 60s
  config.set('database:connectTimeoutMS', 30 * 60 * 1000);
  config.set('database:socketTimeoutMS', 30 * 60 * 1000);

  // Construct application
  const app = getApplication();
  await app.initiate();
  logger = getLogger('migration-process');

  // This bit is useful to trace down promise rejections that aren't caught.
  process.on('unhandledRejection', (reason, promise) => {
    logger.warn('Unhandled promise rejection:', promise, 'reason:', reason.stack || reason);
  });
  process.on('exit', function () {
    logger.info('Process exiting.');
  });
  process.on('SIGINT', () => {
    logger.warn('Received SIGINT. Exiting...');
    process.exit(2);
  });

  connectAndMigrate(app)
    .then(() => {
      logger.info('Storage migration complete.');
      process.exit(0);
    })
    .catch(e => {
      logger.error(e, e);
      process.exit(1);
    });
})()

async function connectAndMigrate(app) {
  logger.info('Connecting to storage...');
  await app.storageLayer.waitForConnection();

  logger.info('Storage connected.');

  logger.info('Starting migration...');
  return await app.storageLayer.versions.migrateIfNeeded();
}
