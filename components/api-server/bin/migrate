#!/usr/bin/env node

// Binary for launching the db migration process. 

const Application = require('../src/application');
const Settings = require('../src/settings');
const bluebird = require('bluebird');

// This bit is useful to trace down promise rejections that aren't caught. 
process.on('unhandledRejection', (reason, promise) => {
  console.warn('Unhandled promise rejection:', promise, 'reason:', reason.stack || reason); 
});
process.on('exit', function () {
  console.info('Process exiting.');
});
process.on('SIGINT', () => {
  console.warn('Received SIGINT. Exiting...');
  process.exit(2);
});

// Load settings
const settings = Settings.load(); 

// Construct application
const application = new Application(settings);

// Start Storage
const connectionResult = bluebird.fromCallback(
  (cb) => application.storageLayer.waitForConnection(cb));

// Make sure we catch top-level exceptions.
connectionResult
  .then(() => console.info('Storage connected.')) 
  .catch(e => {
    console.error(e);
    process.exit(1);
  });

// Migrate Storage if needed
const migrationResult = bluebird.fromCallback(
  (cb) => application.storageLayer.versions.migrateIfNeeded(cb));

// Make sure we catch top-level exceptions.
migrationResult
  .then(() => {
    console.info('Storage migration complete.');
    process.exit(0);
  }) 
  .catch(e => {
    console.error(e);
    process.exit(1);
  });