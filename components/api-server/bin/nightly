#!/usr/bin/env node

// Binary for nightly cron-tasks setup. 

const CronJob = require('cron').CronJob;
const Settings = require('../src/settings');
const settings = Settings.load(); 
const bluebird = require('bluebird');

// Construct application
const Application = require('../src/application');
const app = new Application(settings);

// Construct storage size object
const storage = require('../../storage');
const storageLayer = app.storageLayer;
const storageSize = new storage.Size(
  storageLayer.users,
  [ storageLayer.accesses,
    storageLayer.events,
    storageLayer.followedSlices,
    storageLayer.streams,
    storageLayer.profile ],
  [ storageLayer.eventFiles ]
);

// This bit is useful to trace down promise rejections that aren't caught. 
process.on('unhandledRejection', (reason, promise) => {
  console.warn('Unhandled promise rejection:', promise, 'reason:', reason.stack || reason); 
});
process.on('exit', function () {
  console.info('Server stopped.');
});
process.on('SIGINT', () => {
  console.warn('Received SIGINT. Exiting...');
  process.exit(2);
});

// Setup cron job
let workerRunning = false;
const cronJob = new CronJob({
  cronTime: '* * * * * *', // debug
  // cronTime:: settings.get('nightlyScriptCronTime').str() || '00 15 2 * * *',
  onTick: function () {
    if (workerRunning) {
      return;
    }

    console.info('Starting nightly script (cron job)...');
    workerRunning = true;
    
    bluebird.resolve(runNightlyTasks())
      .then(() => {
        console.info('Nightly tasks complete.');
      })
      .catch(e => {
        console.error(e);
      })
      .finally(() => {
        workerRunning = false;
      });
  }
});

console.info('Cron job setup for nightly script, time pattern: ' + cronJob.cronTime);
cronJob.start();

/**
 * Standalone script to perform nightly tasks (such as updating storage sizes for all users).
 */
async function runNightlyTasks() {
  console.info('Starting update of storage size');
  
  // Retrieve all existing users
  const users = await bluebird.fromCallback(
    (cb) => storageLayer.users.findAll(null, cb));
  
  // Compute storage size used by each user
  for (const user of users) {
    const computeForUser = bluebird.fromCallback(
      (cb) => storageSize.computeForUser(user, cb));
      
    await computeForUser
      .catch((err) => {
        console.error('Error computing storage size for user "' +
          user.username + '" ' + '(' + user.id + '): ' + err);
      });
  }
  
  console.info(users.length + ' users updated.');
}
