#!/usr/bin/env node

// Binary for nightly cron-tasks setup. 

const CronJob = require('cron').CronJob;
const Settings = require('../src/settings');
const settings = Settings.load(); 
const async = require('async');

// Construct application
const Application = require('../src/application');
const app = new Application(settings);

// Construct storage size object
const storage = require('../../storage');
const storageLayer = app.storageLayer;
const storageSize = new storage.Size(
  storageLayer.users,
  [ storageLayer.accesses,
    storageLayer.events,
    storageLayer.followedSlices,
    storageLayer.streams,
    storageLayer.profile ],
  [ storageLayer.eventFiles ]
);

// Setup cron job
let workerRunning = false;
const cronJob = new CronJob({
  cronTime: '* * * * * *', // debug
  // cronTime:: settings.get('nightlyScriptCronTime').str() || '00 15 2 * * *',
  onTick: function () {
    if (workerRunning) {
      return;
    }

    console.info('Starting nightly script (cron job)...');
    runNightlyTasks();
  }
});

console.info('Cron job setup for nightly script, time pattern: ' + cronJob.cronTime);
cronJob.start();

/**
 * Standalone script to perform nightly tasks (such as updating storage sizes for all users).
 * TODO: improve with promise/await?
 */
function runNightlyTasks() {
  console.info('Starting update of storage size');
  workerRunning = true;
  
  storageLayer.users.findAll(null, function (err, users) {
    if (err) {
      console.error(err);
    }
    async.each(users, function (user, userDone) {
      storageSize.computeForUser(user, function (err) {
        if (err) {
          console.warn('Error computing storage size for user "' + user.username + '" ' +
              '(' + user.id + '): ' + err);
        }
        userDone();
      });
    }, function (err) {
      workerRunning = false;
      
      if (err) {
        console.error(err);
        return;
      }
      console.info(users.length + ' users updated.');
    });
  });
}
