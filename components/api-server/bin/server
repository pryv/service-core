#!/usr/bin/env node

// Binary for launching the api-server process. 

const Server = require('../src/server');
const Application = require('../src/application');
const Settings = require('../src/settings');
const setCommonMeta = require('../src/methods/helpers/setCommonMeta');
let logger;
const AirbrakeClient = require('airbrake-js');

(async () => {
  // Load settings asynchronously because we have to fetch
  // some values from register via an http-get request.
  const settings = await Settings.load();
  setCommonMeta({}, settings);

  // Construct application
  const app = new Application(settings);
  logger = app.logFactory('api-server');

  // This bit is useful to trace down promise rejections that aren't caught. 
  process.on('unhandledRejection', (reason) => {
    const rejection = `Unhandled promise rejection: ${reason.stack || reason}`;
    logger.warn(rejection); 
  
    const airbrakeSettings = app.settings.get('logs.airbrake').obj();
    if (airbrakeSettings.active) {
      const airbrake = new AirbrakeClient({
        projectId: airbrakeSettings.id,
        projectKey: airbrakeSettings.key,
      });
      airbrake.notify(rejection);
    }
  });
  process.on('exit', function () {
    logger.info('Server stopped.');
  });
  process.on('SIGINT', () => {
    logger.warn('Received SIGINT. Exiting...');
    process.exit(2);
  });

  // Start the server
  const server = new Server(app); 
  await server.start();
})()
  .then(() => logger.info('Startup sequence complete, Server is running.'))
  .catch(e => {
    console.dir(e);
    if(logger)
      logger.error(e);
    process.exit(1);
  });
