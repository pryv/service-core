#!/usr/bin/env node

// Binary for launching the api-server process. 

const Server = require('../src/server');
const Application = require('../src/application');
const Settings = require('../src/settings');
let logger;

(async () => {
  // Load settings asynchronously because we have to fetch
  // some values from register via an http-get request.
  const settings = await Settings.load();

  // Construct application
  const app = new Application(settings);
  logger = app.logFactory('api-server');

  // This bit is useful to trace down promise rejections that aren't caught. 
  process.on('unhandledRejection', (reason, promise) => {
    logger.warn('Unhandled promise rejection:', promise, 'reason:', reason.stack || reason); 
  });
  process.on('exit', function () {
    logger.info('Server stopped.');
  });
  process.on('SIGINT', () => {
    logger.warn('Received SIGINT. Exiting...');
    process.exit(2);
  });

  // Start the server
  const server = new Server(app); 
  await server.start();
})()
.then(() => logger.info('Startup sequence complete, Server is running.'))
.catch(e => {
  console.dir(e);
  if(logger)
    logger.error(e);
  process.exit(1);
});
