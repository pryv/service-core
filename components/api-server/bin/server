#!/usr/bin/env node

// Binary for launching the api-server process. 

const Server = require('../src/server');
const Application = require('../src/application');

const loadCommonMeta = require('../src/methods/helpers/setCommonMeta').loadSettings;
let  airbrake;
const { Notifier } = require('@airbrake/node');

const { getConfig, getLogger } = require('boiler');
const logger = getLogger('serverRoot');

(async () => {
  const config = await getConfig();
  loadCommonMeta({}); // load settings to common meta
  

  // Construct application
  const app = new Application();
  await app.initiate();
  
  // Setup Airbrake if enabled
  const airbrakeSettings = config.get('logs:airbrake');
  if (airbrakeSettings.active) {
   airbrake = new Notifier({
     projectId: airbrakeSettings.projectId, 
     projectKey: airbrakeSettings.key,
    environment: 'production',
    });
  }

  // Catch uncaught Promise rejections
  process.on('unhandledRejection', (reason) => {
    throw reason;
  });

  // Catch uncaught Exceptions
  process.on('uncaughtExceptions', async (error) => {
    if (logger) logger.error(error);
    console.dir(error);
    if (airbrake != null && typeof airbrake.notify === 'function') {
      await airbrake.notify(error);
    }
    process.exit(1);
  });


  process.on('exit', () => {
    console.log('Server stopped.');
  });
  process.on('SIGINT', () => {
    logger.warn('Received SIGINT. Exiting...');
    process.exit(2);
  });

  // Start the server
  const server = new Server(app); 
  await server.start();
})()
  .then(() => console.log('Startup sequence complete, Server is running. mode: [' + process.env.NODE_ENV + ']'))
  .catch(e => {
    if (logger) logger.error(e);
    console.dir(e);
    process.exit(1);
  });
