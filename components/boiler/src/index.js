/**
 * @license
 * Copyright (C) 2020 Pryv S.A. https://pryv.com - All Rights Reserved
 * Unauthorized copying of this file, via any medium is strictly prohibited
 * Proprietary and confidential
 */
const gifnoc = require('./gifnoc');

const gniggol = require('./gniggol');

const boiler = {
  getReggol: gniggol.getReggol,
  gifnoc: gifnoc,
  getGifnoc: getGifnoc,
  init: init
};
let logger;
let gifnocIsInitalized = false;
let gifnocInitCalledWithName = null;
/**
 * @typedef ConfigFile
 * @property {string} scope - scope for nconf hierachical load
 * @property {string} file - the config file 
 */

/**
 * @typedef ConfigRemote
 * @property {string} scope - scope for nconf hierachical load
 * @property {string} [key] - (optional) key to load result of url. If null override 
 * @property {string} url - the url to the config definition 
 * @property {string} fromKey - retroive url from config matching this key
 */

/**
 * Init Boiler, should be called just once when starting an APP
 * @param {Object} options
 * @param {string} options.appName - the name of the Application used by Logger and debug
 * @param {string} [options.baseConfigDir] - (optional) directory to use to look for configs
 * @param {Array<ConfigFile>} [options.extraConfigFiles] - (optional) and array of extra files to load
 * @param {Array<ConfigRemote>} [options.extraConfigRemotes] - (optional) and array of extra files to load
 * @param {Function} [fullyLoadedCallback] - (optional) called when the config is fully loaded
 */

function init(options, fullyLoadedCallback) {
  if (gifnocInitCalledWithName) {
    logger.warn('Skipping initalization! boiler is already initialized with appName: ' + gifnocInitCalledWithName);
    return gifnoc;
  }

  ;
  gniggol.setGlobalName(options.appName);
  gifnocInitCalledWithName = options.appName;
  gifnoc.initSync({
    baseConfigDir: options.baseConfigDir,
    extraConfigFiles: options.extraConfigFiles
  }, gniggol);
  gifnoc.initASync({
    extraConfigRemotes: options.extraConfigRemotes
  }).then(config => {
    gifnocIsInitalized = true;
    if (fullyLoadedCallback) fullyLoadedCallback(config);
  });
  logger = gniggol.getReggol('boiler');
  return boiler;
}

async function getGifnoc() {
  while (!gifnocIsInitalized) {
    await new Promise(r => setTimeout(r, 100)); // wait 100ms
  }

  return gifnoc;
}

module.exports = boiler;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2NvbXBvbmVudHMvYm9pbGVyL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJnaWZub2MiLCJyZXF1aXJlIiwiZ25pZ2dvbCIsImJvaWxlciIsImdldFJlZ2dvbCIsImdldEdpZm5vYyIsImluaXQiLCJsb2dnZXIiLCJnaWZub2NJc0luaXRhbGl6ZWQiLCJnaWZub2NJbml0Q2FsbGVkV2l0aE5hbWUiLCJvcHRpb25zIiwiZnVsbHlMb2FkZWRDYWxsYmFjayIsIndhcm4iLCJzZXRHbG9iYWxOYW1lIiwiYXBwTmFtZSIsImluaXRTeW5jIiwiYmFzZUNvbmZpZ0RpciIsImV4dHJhQ29uZmlnRmlsZXMiLCJpbml0QVN5bmMiLCJleHRyYUNvbmZpZ1JlbW90ZXMiLCJ0aGVuIiwiY29uZmlnIiwiUHJvbWlzZSIsInIiLCJzZXRUaW1lb3V0IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUEsTUFBTUEsTUFBTSxHQUFJQyxPQUFPLENBQUMsVUFBRCxDQUF2Qjs7QUFDQSxNQUFNQyxPQUFPLEdBQUdELE9BQU8sQ0FBQyxXQUFELENBQXZCOztBQUVBLE1BQU1FLE1BQU0sR0FBRztBQUNiQyxFQUFBQSxTQUFTLEVBQUVGLE9BQU8sQ0FBQ0UsU0FETjtBQUViSixFQUFBQSxNQUFNLEVBQUVBLE1BRks7QUFHYkssRUFBQUEsU0FBUyxFQUFFQSxTQUhFO0FBSWJDLEVBQUFBLElBQUksRUFBRUE7QUFKTyxDQUFmO0FBT0EsSUFBSUMsTUFBSjtBQUNBLElBQUlDLGtCQUFrQixHQUFHLEtBQXpCO0FBQ0EsSUFBSUMsd0JBQXdCLEdBQUcsSUFBL0I7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSxTQUFTSCxJQUFULENBQWNJLE9BQWQsRUFBdUJDLG1CQUF2QixFQUE0QztBQUMxQyxNQUFJRix3QkFBSixFQUE4QjtBQUM1QkYsSUFBQUEsTUFBTSxDQUFDSyxJQUFQLENBQVkseUVBQXlFSCx3QkFBckY7QUFDQSxXQUFPVCxNQUFQO0FBQ0Q7O0FBQUE7QUFFREUsRUFBQUEsT0FBTyxDQUFDVyxhQUFSLENBQXNCSCxPQUFPLENBQUNJLE9BQTlCO0FBQ0FMLEVBQUFBLHdCQUF3QixHQUFHQyxPQUFPLENBQUNJLE9BQW5DO0FBQ0FkLEVBQUFBLE1BQU0sQ0FBQ2UsUUFBUCxDQUFnQjtBQUNkQyxJQUFBQSxhQUFhLEVBQUVOLE9BQU8sQ0FBQ00sYUFEVDtBQUVkQyxJQUFBQSxnQkFBZ0IsRUFBRVAsT0FBTyxDQUFDTztBQUZaLEdBQWhCLEVBR0dmLE9BSEg7QUFLQUYsRUFBQUEsTUFBTSxDQUFDa0IsU0FBUCxDQUFpQjtBQUNmQyxJQUFBQSxrQkFBa0IsRUFBRVQsT0FBTyxDQUFDUztBQURiLEdBQWpCLEVBRUdDLElBRkgsQ0FFU0MsTUFBRCxJQUFZO0FBQ2xCYixJQUFBQSxrQkFBa0IsR0FBRyxJQUFyQjtBQUNBLFFBQUlHLG1CQUFKLEVBQXlCQSxtQkFBbUIsQ0FBQ1UsTUFBRCxDQUFuQjtBQUMxQixHQUxEO0FBT0FkLEVBQUFBLE1BQU0sR0FBR0wsT0FBTyxDQUFDRSxTQUFSLENBQWtCLFFBQWxCLENBQVQ7QUFDQSxTQUFPRCxNQUFQO0FBQ0Q7O0FBRUQsZUFBZUUsU0FBZixHQUEyQjtBQUN6QixTQUFNLENBQUVHLGtCQUFSLEVBQTRCO0FBQzFCLFVBQU0sSUFBSWMsT0FBSixDQUFZQyxDQUFDLElBQUlDLFVBQVUsQ0FBQ0QsQ0FBRCxFQUFJLEdBQUosQ0FBM0IsQ0FBTixDQUQwQixDQUNrQjtBQUM3Qzs7QUFDRCxTQUFPdkIsTUFBUDtBQUNEOztBQUdEeUIsTUFBTSxDQUFDQyxPQUFQLEdBQWlCdkIsTUFBakIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgKEMpIDIwMjAgUHJ5diBTLkEuIGh0dHBzOi8vcHJ5di5jb20gLSBBbGwgUmlnaHRzIFJlc2VydmVkXG4gKiBVbmF1dGhvcml6ZWQgY29weWluZyBvZiB0aGlzIGZpbGUsIHZpYSBhbnkgbWVkaXVtIGlzIHN0cmljdGx5IHByb2hpYml0ZWRcbiAqIFByb3ByaWV0YXJ5IGFuZCBjb25maWRlbnRpYWxcbiAqL1xuXG5jb25zdCBnaWZub2MgID0gcmVxdWlyZSgnLi9naWZub2MnKTtcbmNvbnN0IGduaWdnb2wgPSByZXF1aXJlKCcuL2duaWdnb2wnKTtcblxuY29uc3QgYm9pbGVyID0ge1xuICBnZXRSZWdnb2w6IGduaWdnb2wuZ2V0UmVnZ29sLCBcbiAgZ2lmbm9jOiBnaWZub2MsIFxuICBnZXRHaWZub2M6IGdldEdpZm5vYyxcbiAgaW5pdDogaW5pdFxufVxuXG5sZXQgbG9nZ2VyO1xubGV0IGdpZm5vY0lzSW5pdGFsaXplZCA9IGZhbHNlO1xubGV0IGdpZm5vY0luaXRDYWxsZWRXaXRoTmFtZSA9IG51bGw7XG5cbi8qKlxuICogQHR5cGVkZWYgQ29uZmlnRmlsZVxuICogQHByb3BlcnR5IHtzdHJpbmd9IHNjb3BlIC0gc2NvcGUgZm9yIG5jb25mIGhpZXJhY2hpY2FsIGxvYWRcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBmaWxlIC0gdGhlIGNvbmZpZyBmaWxlIFxuICovXG5cbi8qKlxuICogQHR5cGVkZWYgQ29uZmlnUmVtb3RlXG4gKiBAcHJvcGVydHkge3N0cmluZ30gc2NvcGUgLSBzY29wZSBmb3IgbmNvbmYgaGllcmFjaGljYWwgbG9hZFxuICogQHByb3BlcnR5IHtzdHJpbmd9IFtrZXldIC0gKG9wdGlvbmFsKSBrZXkgdG8gbG9hZCByZXN1bHQgb2YgdXJsLiBJZiBudWxsIG92ZXJyaWRlIFxuICogQHByb3BlcnR5IHtzdHJpbmd9IHVybCAtIHRoZSB1cmwgdG8gdGhlIGNvbmZpZyBkZWZpbml0aW9uIFxuICogQHByb3BlcnR5IHtzdHJpbmd9IGZyb21LZXkgLSByZXRyb2l2ZSB1cmwgZnJvbSBjb25maWcgbWF0Y2hpbmcgdGhpcyBrZXlcbiAqL1xuXG5cbi8qKlxuICogSW5pdCBCb2lsZXIsIHNob3VsZCBiZSBjYWxsZWQganVzdCBvbmNlIHdoZW4gc3RhcnRpbmcgYW4gQVBQXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMuYXBwTmFtZSAtIHRoZSBuYW1lIG9mIHRoZSBBcHBsaWNhdGlvbiB1c2VkIGJ5IExvZ2dlciBhbmQgZGVidWdcbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5iYXNlQ29uZmlnRGlyXSAtIChvcHRpb25hbCkgZGlyZWN0b3J5IHRvIHVzZSB0byBsb29rIGZvciBjb25maWdzXG4gKiBAcGFyYW0ge0FycmF5PENvbmZpZ0ZpbGU+fSBbb3B0aW9ucy5leHRyYUNvbmZpZ0ZpbGVzXSAtIChvcHRpb25hbCkgYW5kIGFycmF5IG9mIGV4dHJhIGZpbGVzIHRvIGxvYWRcbiAqIEBwYXJhbSB7QXJyYXk8Q29uZmlnUmVtb3RlPn0gW29wdGlvbnMuZXh0cmFDb25maWdSZW1vdGVzXSAtIChvcHRpb25hbCkgYW5kIGFycmF5IG9mIGV4dHJhIGZpbGVzIHRvIGxvYWRcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtmdWxseUxvYWRlZENhbGxiYWNrXSAtIChvcHRpb25hbCkgY2FsbGVkIHdoZW4gdGhlIGNvbmZpZyBpcyBmdWxseSBsb2FkZWRcbiAqL1xuZnVuY3Rpb24gaW5pdChvcHRpb25zLCBmdWxseUxvYWRlZENhbGxiYWNrKSB7XG4gIGlmIChnaWZub2NJbml0Q2FsbGVkV2l0aE5hbWUpIHtcbiAgICBsb2dnZXIud2FybignU2tpcHBpbmcgaW5pdGFsaXphdGlvbiEgYm9pbGVyIGlzIGFscmVhZHkgaW5pdGlhbGl6ZWQgd2l0aCBhcHBOYW1lOiAnICsgZ2lmbm9jSW5pdENhbGxlZFdpdGhOYW1lKVxuICAgIHJldHVybiBnaWZub2M7XG4gIH07XG5cbiAgZ25pZ2dvbC5zZXRHbG9iYWxOYW1lKG9wdGlvbnMuYXBwTmFtZSk7XG4gIGdpZm5vY0luaXRDYWxsZWRXaXRoTmFtZSA9IG9wdGlvbnMuYXBwTmFtZTtcbiAgZ2lmbm9jLmluaXRTeW5jKHtcbiAgICBiYXNlQ29uZmlnRGlyOiBvcHRpb25zLmJhc2VDb25maWdEaXIsXG4gICAgZXh0cmFDb25maWdGaWxlczogb3B0aW9ucy5leHRyYUNvbmZpZ0ZpbGVzXG4gIH0sIGduaWdnb2wpO1xuXG4gIGdpZm5vYy5pbml0QVN5bmMoe1xuICAgIGV4dHJhQ29uZmlnUmVtb3Rlczogb3B0aW9ucy5leHRyYUNvbmZpZ1JlbW90ZXMsXG4gIH0pLnRoZW4oKGNvbmZpZykgPT4ge1xuICAgIGdpZm5vY0lzSW5pdGFsaXplZCA9IHRydWU7XG4gICAgaWYgKGZ1bGx5TG9hZGVkQ2FsbGJhY2spIGZ1bGx5TG9hZGVkQ2FsbGJhY2soY29uZmlnKTtcbiAgfSk7XG5cbiAgbG9nZ2VyID0gZ25pZ2dvbC5nZXRSZWdnb2woJ2JvaWxlcicpXG4gIHJldHVybiBib2lsZXJcbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0R2lmbm9jKCkge1xuICB3aGlsZSghIGdpZm5vY0lzSW5pdGFsaXplZCkge1xuICAgIGF3YWl0IG5ldyBQcm9taXNlKHIgPT4gc2V0VGltZW91dChyLCAxMDApKTsgLy8gd2FpdCAxMDBtc1xuICB9XG4gIHJldHVybiBnaWZub2M7XG59XG5cblxubW9kdWxlLmV4cG9ydHMgPSBib2lsZXI7Il19
//# sourceMappingURL=index.js.map